/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.classes;

import java.sql.PreparedStatement;
import java.sql.SQLException; 
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import java.awt.event.*;
import java.sql.*;
/**
 *
 * 
 */
public class Order_Page extends javax.swing.JFrame {

    /**
     * Creates new form Order_Page
     */
    public Order_Page() {
        initComponents();
        populateProductCodes();
        loadOrdersTable() ;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cmbbxprodcodO = new javax.swing.JComboBox<>();
        lblprodname = new javax.swing.JLabel();
        txtprodnameO = new javax.swing.JTextField();
        lblquandel0 = new javax.swing.JLabel();
        txtquanord = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblorders = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter Details"));

        lblTitle.setText("Order Log");

        jLabel1.setText("Product Code:");

        cmbbxprodcodO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbbxprodcodOActionPerformed(evt);
            }
        });

        lblprodname.setText("Product Name:");

        lblquandel0.setText("Quantity Ordered:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbbxprodcodO, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblprodname, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblquandel0, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtquanord, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                                .addComponent(txtprodnameO, javax.swing.GroupLayout.Alignment.LEADING)))))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(lblTitle)
                .addGap(50, 50, 50)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(cmbbxprodcodO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83)
                .addComponent(lblprodname)
                .addGap(29, 29, 29)
                .addComponent(txtprodnameO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(lblquandel0)
                .addGap(38, 38, 38)
                .addComponent(txtquanord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(85, Short.MAX_VALUE))
        );

        tblorders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Sold ID", "Product Code", "Product Name", "Quantity Ordered", "Order Date"
            }
        ));
        jScrollPane1.setViewportView(tblorders);

        btnAdd.setText("Proceed");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 628, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(110, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAdd)
                .addGap(44, 44, 44)
                .addComponent(btnClose)
                .addGap(251, 251, 251))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnClose))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbbxprodcodOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbbxprodcodOActionPerformed
        // TODO add your handling code here:
        fetchProductDetails(cmbbxprodcodO.getSelectedItem().toString());
        populateProductCodes();
    }//GEN-LAST:event_cmbbxprodcodOActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        submitOrder();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed
    private void populateProductCodes() {  
    // Fetch product codes directly from the database and populate the ComboBox
    String query = "SELECT product_code FROM products";
    try (Connection conn = DBConnector.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(query);
         ResultSet rs = pstmt.executeQuery()) {

        // Loop through each product code and add it to the ComboBox
        while (rs.next()) {
            String prodCode = rs.getString("product_code");
            
            // Check if the product code already exists in the ComboBox
            boolean exists = false;
            for (int i = 0; i < cmbbxprodcodO.getItemCount(); i++) {
                if (cmbbxprodcodO.getItemAt(i).equals(prodCode)) {
                    exists = true;
                    break; // If found, no need to add it again
                }
            }

            // Add product code if not already in the ComboBox
            if (!exists) {
                cmbbxprodcodO.addItem(prodCode);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}
     private void fetchProductDetails(String productCode) {
        try (Connection conn = DBConnector.getConnection()) {
            String query = "SELECT product_name FROM products WHERE product_code = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, productCode);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                txtprodnameO.setText(rs.getString("product_name"));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
     
    private void submitOrder() {
      String productCode = (String) cmbbxprodcodO.getSelectedItem();
    String productName = txtprodnameO.getText();
    String quantityOrderedText = txtquanord.getText();

    // Check if the quantity ordered is a valid number
    if (quantityOrderedText.isEmpty() || !isNumeric(quantityOrderedText)) {
        JOptionPane.showMessageDialog(this, "Please enter a valid quantity.");
        return;
    }

    int quantityOrdered = Integer.parseInt(quantityOrderedText);

    try (Connection conn = DBConnector.getConnection()) {
        // Check current stock
        String stockCheckQuery = "SELECT quantity FROM products WHERE product_code = ?";
        PreparedStatement stockCheckStmt = conn.prepareStatement(stockCheckQuery);
        stockCheckStmt.setString(1, productCode);
        ResultSet rs = stockCheckStmt.executeQuery();

        if (rs.next()) {
            int currentStock = rs.getInt("quantity");

            // Check if there's enough stock available
            if (quantityOrdered > currentStock) {
                JOptionPane.showMessageDialog(this, "Insufficient stock. Available: " + currentStock);
                return;
            }

            // Calculate the new stock quantity
            int newStock = currentStock - quantityOrdered;

            // Show confirmation dialog with current and new stock details
            String message = String.format("You are about to reduce the stock of %s (Product Code: %s) from %d to %d.\nDo you want to proceed with the order?", 
                                          productName, productCode, currentStock, newStock);
            int confirm = JOptionPane.showConfirmDialog(this, message, "Confirm Order", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                // Update the stock in the products table
                String updateProductQuery = "UPDATE products SET quantity = ? WHERE product_code = ?";
                PreparedStatement updateStmt = conn.prepareStatement(updateProductQuery);
                updateStmt.setInt(1, newStock); // Update to the new stock level
                updateStmt.setString(2, productCode);
                updateStmt.executeUpdate();

                // Insert the order details into the orders table
                String orderInsertQuery = "INSERT INTO orders (product_code, product_name, quantity_ordered, order_date) VALUES (?, ?, ?, NOW())";
                PreparedStatement orderInsertStmt = conn.prepareStatement(orderInsertQuery);
                orderInsertStmt.setString(1, productCode);
                orderInsertStmt.setString(2, productName);
                orderInsertStmt.setInt(3, quantityOrdered);
                orderInsertStmt.executeUpdate();

                // Show success message
                JOptionPane.showMessageDialog(this, "Order submitted successfully!");

                // Refresh the orders table to reflect updated data
                loadOrdersTable();
                                         
            } else {
                JOptionPane.showMessageDialog(this, "Order process canceled.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Product not found.");
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error submitting order.");
    }
}

       private boolean isNumeric(String str) {
    try {
        Integer.parseInt(str); // Try to parse the string as an integer
        return true;
    } catch (NumberFormatException e) {
        return false; // If it fails to parse, it's not numeric
    }
       }
       
    private void loadOrdersTable() {
    try (Connection conn = DBConnector.getConnection()) {
        String query = "SELECT * FROM orders"; // Update to match your orders table name
        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();

        // Clear existing table data before populating with new data
        DefaultTableModel model = (DefaultTableModel) tblorders.getModel(); 
        model.setRowCount(0); // Clears the table

        // Populate the table with updated order data
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("sold_id"),         
                rs.getString("product_code"),
                rs.getString("product_name"),
                rs.getInt("quantity_ordered"), 
                rs.getTimestamp("order_date")  
            });
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading order data.");
    }
}      
       
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Order_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Order_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Order_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Order_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Order_Page().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClose;
    private javax.swing.JComboBox<String> cmbbxprodcodO;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblprodname;
    private javax.swing.JLabel lblquandel0;
    private javax.swing.JTable tblorders;
    private javax.swing.JTextField txtprodnameO;
    private javax.swing.JTextField txtquanord;
    // End of variables declaration//GEN-END:variables
}
