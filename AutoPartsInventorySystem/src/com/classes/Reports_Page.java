/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.classes;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;  
import java.sql.Connection;
import java.sql.*;
/**
 *
 * 
 */
public class Reports_Page extends javax.swing.JFrame {

    /**
     * Creates new form Reports_Page
     */
    public Reports_Page() {
        initComponents();
        loadProductsTable();
        loadStocksTable() ;
        loadSuppliersTable();
        loadUsersTable();
        loadInStockTable();
        loadLowStockTable();
        loadOutOfStockTable();
        loadReorderTable();
        loadDeliveryTable();
        loadOrderTable();
            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        lblReports = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnl1Welcome = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProd = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblStocks = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblSupp = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblUsers = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblinstocks = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tbllowstocks = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        tbloutofstocks = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblrestock = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        btnrefresh = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        tbldelivery = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        tblorder = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        btnclose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1480, 739));

        jPanel5.setBackground(new java.awt.Color(153, 153, 153));
        jPanel5.setPreferredSize(new java.awt.Dimension(1493, 523));

        jPanel6.setBackground(new java.awt.Color(42, 58, 63));

        lblReports.setBackground(new java.awt.Color(255, 255, 255));
        lblReports.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblReports.setForeground(new java.awt.Color(255, 255, 255));
        lblReports.setText("Reports");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(lblReports, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1230, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblReports)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jTabbedPane1.setBackground(new java.awt.Color(102, 102, 102));
        jTabbedPane1.setForeground(new java.awt.Color(255, 255, 255));

        pnl1Welcome.setBackground(new java.awt.Color(204, 204, 204));

        jPanel7.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        jLabel1.setText(" WELCOME TO REPORTS");

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel2.setText("Check Total Records");

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel5.setText("Click the tabs to check reports");

        jLabel16.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        jLabel16.setText("- In Stocks");

        jLabel17.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        jLabel17.setText("- Stocks");

        jLabel18.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        jLabel18.setText("- Supplier");

        jLabel19.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        jLabel19.setText("- Users");

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel3.setText("Check Status Reports");

        jLabel20.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        jLabel20.setText("- Products");

        jLabel21.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        jLabel21.setText("- Low Stocks");

        jLabel22.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        jLabel22.setText("- Out of Stocks");

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel4.setText("Check Order & Delivery Reports");

        jLabel23.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        jLabel23.setText("- Re-Order");

        jLabel24.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        jLabel24.setText("- Orders");

        jLabel25.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        jLabel25.setText("- Delivery");

        javax.swing.GroupLayout pnl1WelcomeLayout = new javax.swing.GroupLayout(pnl1Welcome);
        pnl1Welcome.setLayout(pnl1WelcomeLayout);
        pnl1WelcomeLayout.setHorizontalGroup(
            pnl1WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl1WelcomeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnl1WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl1WelcomeLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnl1WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl1WelcomeLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(pnl1WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(95, 95, 95)
                                .addGroup(pnl1WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(112, 112, 112))
                            .addGroup(pnl1WelcomeLayout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(101, 101, 101)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(122, 122, 122)))
                        .addGroup(pnl1WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl1WelcomeLayout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(494, 494, 494))
                            .addGroup(pnl1WelcomeLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(pnl1WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(pnl1WelcomeLayout.createSequentialGroup()
                        .addGroup(pnl1WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl1WelcomeLayout.createSequentialGroup()
                                .addGap(83, 83, 83)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnl1WelcomeLayout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        pnl1WelcomeLayout.setVerticalGroup(
            pnl1WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl1WelcomeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl1WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnl1WelcomeLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(pnl1WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnl1WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnl1WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnl1WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 176, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Report", pnl1Welcome);

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        tblProd.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Products"
            }
        ));
        tblProd.setGridColor(new java.awt.Color(51, 51, 51));
        tblProd.setRowHeight(23);
        tblProd.setShowHorizontalLines(true);
        jScrollPane1.setViewportView(tblProd);

        tblStocks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Stocks"
            }
        ));
        tblStocks.setGridColor(new java.awt.Color(51, 51, 51));
        tblStocks.setRowHeight(23);
        tblStocks.setShowHorizontalLines(true);
        jScrollPane2.setViewportView(tblStocks);

        tblSupp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Suppliers"
            }
        ));
        tblSupp.setGridColor(new java.awt.Color(51, 51, 51));
        tblSupp.setRowHeight(23);
        tblSupp.setShowHorizontalLines(true);
        jScrollPane3.setViewportView(tblSupp);

        tblUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Users"
            }
        ));
        tblUsers.setGridColor(new java.awt.Color(51, 51, 51));
        tblUsers.setRowHeight(23);
        tblUsers.setShowHorizontalLines(true);
        jScrollPane4.setViewportView(tblUsers);

        jLabel6.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        jLabel6.setText("Check Total Records");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(113, 113, 113)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(583, 583, 583))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
        );

        jTabbedPane1.addTab("Totals", jPanel2);

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));

        tblinstocks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "In Stock"
            }
        ));
        tblinstocks.setGridColor(new java.awt.Color(51, 51, 51));
        tblinstocks.setRowHeight(25);
        tblinstocks.setShowHorizontalLines(true);
        jScrollPane5.setViewportView(tblinstocks);

        tbllowstocks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Low Stock"
            }
        ));
        tbllowstocks.setGridColor(new java.awt.Color(51, 51, 51));
        tbllowstocks.setRowHeight(25);
        tbllowstocks.setShowHorizontalLines(true);
        jScrollPane6.setViewportView(tbllowstocks);

        tbloutofstocks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Out of Stock"
            }
        ));
        tbloutofstocks.setGridColor(new java.awt.Color(51, 51, 51));
        tbloutofstocks.setRowHeight(25);
        tbloutofstocks.setShowHorizontalLines(true);
        jScrollPane7.setViewportView(tbloutofstocks);

        jLabel7.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        jLabel7.setText("Check Status Reports");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(123, 123, 123)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(557, 557, 557)
                        .addComponent(jLabel7)))
                .addContainerGap(159, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 20, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );

        jTabbedPane1.addTab("Status", jPanel3);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        tblrestock.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Reorder"
            }
        ));
        tblrestock.setGridColor(new java.awt.Color(0, 0, 0));
        tblrestock.setRowHeight(23);
        tblrestock.setShowHorizontalLines(true);
        jScrollPane8.setViewportView(tblrestock);

        jButton1.setBackground(new java.awt.Color(51, 51, 51));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Click to Restock");
        jButton1.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnrefresh.setBackground(new java.awt.Color(51, 51, 51));
        btnrefresh.setForeground(new java.awt.Color(255, 255, 255));
        btnrefresh.setText("Refresh");
        btnrefresh.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        btnrefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnrefreshActionPerformed(evt);
            }
        });

        tbldelivery.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Delivery"
            }
        ));
        tbldelivery.setGridColor(new java.awt.Color(51, 51, 51));
        tbldelivery.setRowHeight(23);
        tbldelivery.setShowHorizontalLines(true);
        jScrollPane9.setViewportView(tbldelivery);

        tblorder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Order"
            }
        ));
        tblorder.setGridColor(new java.awt.Color(51, 51, 51));
        tblorder.setRowHeight(23);
        tblorder.setShowHorizontalLines(true);
        jScrollPane10.setViewportView(tblorder);

        jLabel8.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        jLabel8.setText("Check Order & Delivery Reports");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(btnrefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 294, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(537, 537, 537))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnrefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Order & Delivery", jPanel1);

        btnclose.setBackground(new java.awt.Color(51, 51, 51));
        btnclose.setForeground(new java.awt.Color(255, 255, 255));
        btnclose.setText("Close");
        btnclose.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        btnclose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnclose, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnclose, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 1463, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 733, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        new Delivery_Page().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btncloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncloseActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btncloseActionPerformed

    private void btnrefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnrefreshActionPerformed
        // TODO add your handling code here:
        loadReorderTable();
    }//GEN-LAST:event_btnrefreshActionPerformed
    
private void loadProductsTable() {
    DefaultTableModel model = (DefaultTableModel) tblProd.getModel();
    model.setRowCount(0); // Clear the table before adding data

    String query = "SELECT COUNT(*) AS total_products FROM products";
    String productListQuery = "SELECT product_name FROM products";

    try (Connection conn = DBConnector.getConnection();
         Statement stmt1 = conn.createStatement();
         Statement stmt2 = conn.createStatement();
         ResultSet rs1 = stmt1.executeQuery(query);
         ResultSet rs2 = stmt2.executeQuery(productListQuery)) {

        // Add total products count as the first row
        if (rs1.next()) {
            model.addRow(new Object[]{
                "Total Products: " + rs1.getInt("total_products")
            });
        }

        // Add product names as subsequent rows
        while (rs2.next()) {
            model.addRow(new Object[]{
                "- " + rs2.getString("product_name")
            });
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }
}
    
private void loadStocksTable() {
    DefaultTableModel model = (DefaultTableModel) tblStocks.getModel();
    model.setRowCount(0); 

    String totalStocksQuery = "SELECT SUM(quantity) AS total_stocks FROM products";
    String stockDetailsQuery = "SELECT product_name, quantity FROM products";

    try (Connection conn = DBConnector.getConnection();
         Statement stmt1 = conn.createStatement();
         Statement stmt2 = conn.createStatement();
         ResultSet rs1 = stmt1.executeQuery(totalStocksQuery);
         ResultSet rs2 = stmt2.executeQuery(stockDetailsQuery)) {
     
        if (rs1.next()) {
            model.addRow(new Object[]{
                "Total Stocks: " + rs1.getInt("total_stocks")
            });
        }
    
        while (rs2.next()) {
            String productName = rs2.getString("product_name");
            int quantity = rs2.getInt("quantity");

            model.addRow(new Object[]{
                "- " + productName + " (Quantity: " + quantity + ")"
            });
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }
}
    
private void loadSuppliersTable() {
    DefaultTableModel model = (DefaultTableModel) tblSupp.getModel();
    model.setRowCount(0); 

    String totalSuppliersQuery = "SELECT COUNT(*) AS total_suppliers FROM suppliers";
    String supplierNamesQuery = "SELECT suppliername FROM suppliers";

    try (Connection conn = DBConnector.getConnection();
         Statement stmt1 = conn.createStatement();
         Statement stmt2 = conn.createStatement();
         ResultSet rs1 = stmt1.executeQuery(totalSuppliersQuery);
         ResultSet rs2 = stmt2.executeQuery(supplierNamesQuery)) {
      
        if (rs1.next()) {
            model.addRow(new Object[]{
                "Total Suppliers: " + rs1.getInt("total_suppliers")
            });
        }

        while (rs2.next()) {
            String supplierName = rs2.getString("suppliername");

            model.addRow(new Object[]{
                "- " + supplierName
            });
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }
}
    
private void loadUsersTable() {
    DefaultTableModel model = (DefaultTableModel) tblUsers.getModel();
    model.setRowCount(0); 

    String totalUsersQuery = "SELECT COUNT(*) AS total_users FROM users";
    String userNamesQuery = "SELECT fullname, usertype FROM users";

    try (Connection conn = DBConnector.getConnection();
         Statement stmt1 = conn.createStatement();
         Statement stmt2 = conn.createStatement();
         ResultSet rs1 = stmt1.executeQuery(totalUsersQuery);
         ResultSet rs2 = stmt2.executeQuery(userNamesQuery)) {
   
        if (rs1.next()) {
            model.addRow(new Object[]{
                "Total Users: " + rs1.getInt("total_users")
            });
        }

        while (rs2.next()) {
            String fullName = rs2.getString("fullname");
            String userType = rs2.getString("usertype");

            model.addRow(new Object[]{
                "- " + fullName + " (" + userType + ")"
            });
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }
}
    
private void loadInStockTable() {
    DefaultTableModel model = (DefaultTableModel) tblinstocks.getModel();
    model.setRowCount(0); 

    String totalProductsQuery = "SELECT COUNT(*) AS total_products FROM products";  // Get total number of products
    String inStockQuery = "SELECT product_name, quantity FROM products WHERE quantity > 20";  // Get products in stock with quantity > 20

    try (Connection conn = DBConnector.getConnection();
         Statement stmt1 = conn.createStatement();
         Statement stmt2 = conn.createStatement();
         ResultSet rs1 = stmt1.executeQuery(totalProductsQuery);
         ResultSet rs2 = stmt2.executeQuery(inStockQuery)) {

        int totalProducts = 0;
        int inStockCount = 0;  

        // Get total number of products
        if (rs1.next()) {
            totalProducts = rs1.getInt("total_products");
        }

        // Loop through in-stock products and count them
        while (rs2.next()) {
            String productName = rs2.getString("product_name");
            int quantity = rs2.getInt("quantity");

            inStockCount++;  // Increment the count of in-stock products

            // Add product names and quantities for in-stock products
            model.addRow(new Object[]{
                "- " + productName + " (Quantity: " + quantity + ")"
            });
        }

        // After processing products, add total in-stock count and percentage as the first two rows
        double percentageInStock = (totalProducts > 0) ? ((double) inStockCount / totalProducts) * 100 : 0;

        // Add the total in-stock and percentage in the correct rows
        model.insertRow(0, new Object[]{
            "Total Products In Stock: " + inStockCount + " out of " + totalProducts
        });
        model.insertRow(1, new Object[]{
            "Percentage of Products In Stock: " + String.format("%.2f", percentageInStock) + "%"
        });

    } catch (SQLException e) {
        e.printStackTrace();
    }
}
  
private void loadLowStockTable() {
    DefaultTableModel model = (DefaultTableModel) tbllowstocks.getModel();
    model.setRowCount(0); 

    String totalProductsQuery = "SELECT COUNT(*) AS total_products FROM products";  // Get total number of products
    String lowStockQuery = "SELECT product_name, quantity FROM products WHERE quantity <= 20 AND quantity != 0";  // Get products with low stock (quantity <= 20 but not 0)

    try (Connection conn = DBConnector.getConnection();
         Statement stmt1 = conn.createStatement();
         Statement stmt2 = conn.createStatement();
         ResultSet rs1 = stmt1.executeQuery(totalProductsQuery);
         ResultSet rs2 = stmt2.executeQuery(lowStockQuery)) {

        int totalProducts = 0;
        int lowStockCount = 0;  // This will store the count of low-stock products

        // Get total number of products
        if (rs1.next()) {
            totalProducts = rs1.getInt("total_products");
        }

        // Loop through low-stock products and count them
        while (rs2.next()) {
            String productName = rs2.getString("product_name");
            int quantity = rs2.getInt("quantity");

            lowStockCount++;  // Increment the count of low-stock products

            // Add product names and quantities for low-stock products
            model.addRow(new Object[]{
                "- " + productName + " (Quantity: " + quantity + ")"
            });
        }

        // After processing products, add total low-stock count and percentage as the first two rows
        double percentageLowStock = (totalProducts > 0) ? ((double) lowStockCount / totalProducts) * 100 : 0;

        // Add the total low-stock and percentage in the correct rows
        model.insertRow(0, new Object[]{
            "Total Low Stock Products: " + lowStockCount + " out of " + totalProducts
        });
        model.insertRow(1, new Object[]{
            "Percentage of Products Low Stock: " + String.format("%.2f", percentageLowStock) + "%"
        });

    } catch (SQLException e) {
        e.printStackTrace();
    }
}
  
private void loadOutOfStockTable() {
    DefaultTableModel model = (DefaultTableModel) tbloutofstocks.getModel();
    model.setRowCount(0); 

    String totalProductsQuery = "SELECT COUNT(*) AS total_products FROM products";  // Get total number of products
    String outOfStockQuery = "SELECT product_name, quantity FROM products WHERE quantity = 0";  // Get out-of-stock products

    try (Connection conn = DBConnector.getConnection();
         Statement stmt1 = conn.createStatement();
         Statement stmt2 = conn.createStatement();
         ResultSet rs1 = stmt1.executeQuery(totalProductsQuery);
         ResultSet rs2 = stmt2.executeQuery(outOfStockQuery)) {

        int totalProducts = 0;
        int outOfStockCount = 0;  
        
        if (rs1.next()) {
            totalProducts = rs1.getInt("total_products");
        }

        // Loop through out-of-stock products and count them
        while (rs2.next()) {
            String productName = rs2.getString("product_name");
            int quantity = rs2.getInt("quantity");  // Get the quantity for each out-of-stock product
            outOfStockCount++;  // Increment the count of out-of-stock products

            // Add product names and quantities for out-of-stock products
            model.addRow(new Object[] {
                "- " + productName + " (Quantity: " + quantity + ")"
            });
        }

        // Calculate the percentage of out-of-stock products
        double percentageOutOfStock = (totalProducts > 0) ? ((double) outOfStockCount / totalProducts) * 100 : 0;

        // Add the total out-of-stock count and percentage as the first two rows
        model.insertRow(0, new Object[] {
            "Total Products Out of Stock: " + outOfStockCount + " out of " + totalProducts
        });
        model.insertRow(1, new Object[] {
            "Percentage of Products Out of Stock: " + String.format("%.2f", percentageOutOfStock) + "%"
        });

    } catch (SQLException e) {
        e.printStackTrace();
    }
}

private void loadReorderTable() {
    DefaultTableModel model = (DefaultTableModel) tblrestock.getModel();
    model.setRowCount(0); 

    // Define the reorder point
    int reorderPoint = 25;

    // Query to count products needing reorder
    String countReorderQuery = "SELECT COUNT(*) AS total_reorder FROM products WHERE quantity <= " + reorderPoint;
    
    // Query to get product codes, names, and quantities needing reorder
    String productsReorderQuery = "SELECT product_code, product_name, quantity FROM products WHERE quantity <= " + reorderPoint;

    try (Connection conn = DBConnector.getConnection();
         Statement stmt1 = conn.createStatement();
         Statement stmt2 = conn.createStatement();
         ResultSet rs1 = stmt1.executeQuery(countReorderQuery);
         ResultSet rs2 = stmt2.executeQuery(productsReorderQuery)) {

        // Add reorder point and total products needing reorder as the first two rows
        if (rs1.next()) {
            model.addRow(new Object[]{
                "Reorder Point: " + reorderPoint + " units"
            });
            model.addRow(new Object[]{
                "Total Products Needing Reorder: " + rs1.getInt("total_reorder")
            });
        }

        // Add products needing reorder in the specified format
        while (rs2.next()) {
            String productCode = rs2.getString("product_code");
            String productName = rs2.getString("product_name");
            int quantity = rs2.getInt("quantity");
            
            // Display only the products that need reorder (quantity <= reorder point)
            if (quantity <= reorderPoint) {
                String productInfo = productCode + " - " + productName + " (Quantity: " + quantity + ")";
                model.addRow(new Object[]{ "-[" + productInfo + "]" });
            }
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }    
}
    
private void loadDeliveryTable() {
    DefaultTableModel model = (DefaultTableModel) tbldelivery.getModel();
    model.setRowCount(0); 

    // Query to count total deliveries made
    String countDeliveriesQuery = "SELECT COUNT(*) AS total_deliveries FROM deliveries";
    
    // Query to get product names, product codes, and the total quantity added for each product
    String productsDeliveryQuery = "SELECT product_code, product_name, SUM(quantity_delivered) AS total_added FROM deliveries GROUP BY product_code, product_name";
    
    try (Connection conn = DBConnector.getConnection();
         Statement stmt1 = conn.createStatement();
         Statement stmt2 = conn.createStatement();
         ResultSet rs1 = stmt1.executeQuery(countDeliveriesQuery);
         ResultSet rs2 = stmt2.executeQuery(productsDeliveryQuery)) {

        // Add total deliveries count as the first row
        if (rs1.next()) {
            model.addRow(new Object[]{
                "Total Deliveries Made: " + rs1.getInt("total_deliveries")
            });
        }

        // Add products with the total quantity added in the specified format
        while (rs2.next()) {
            String productCode = rs2.getString("product_code");
            String productName = rs2.getString("product_name");
            int quantityAdded = rs2.getInt("total_added");
            
            // Display the product info with quantity added
            String productInfo = productCode + " - " + productName + " (Quantity Added: " + quantityAdded + ")";
            model.addRow(new Object[]{ "-[" + productInfo + "]" });
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }
}
    
private void loadOrderTable() {
    DefaultTableModel model = (DefaultTableModel) tblorder.getModel();
    model.setRowCount(0); 

    // Query to count total orders made
    String countOrdersQuery = "SELECT COUNT(*) AS total_orders FROM orders";
    
    // Query to get product names, product codes, and the total quantity ordered for each product
    String productsOrderQuery = "SELECT product_code, product_name, SUM(quantity_ordered) AS total_reduced FROM orders GROUP BY product_code, product_name";
    
    try (Connection conn = DBConnector.getConnection();
         Statement stmt1 = conn.createStatement();
         Statement stmt2 = conn.createStatement();
         ResultSet rs1 = stmt1.executeQuery(countOrdersQuery);
         ResultSet rs2 = stmt2.executeQuery(productsOrderQuery)) {

        // Add total orders count as the first row
        if (rs1.next()) {
            model.addRow(new Object[] {
                "Total Orders Made: " + rs1.getInt("total_orders")
            });
        }

        // Add products with the total quantity reduced (ordered)
        while (rs2.next()) {
            String productCode = rs2.getString("product_code");
            String productName = rs2.getString("product_name");
            int quantityReduced = rs2.getInt("total_reduced");
            
            // Display the product info with quantity reduced
            String productInfo = productCode + " - " + productName + " (Quantity Reduced: " + quantityReduced + ")";
            model.addRow(new Object[] { "-[" + productInfo + "]" });
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reports_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reports_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reports_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reports_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reports_Page().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnclose;
    private javax.swing.JButton btnrefresh;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblReports;
    private javax.swing.JPanel pnl1Welcome;
    private javax.swing.JTable tblProd;
    private javax.swing.JTable tblStocks;
    private javax.swing.JTable tblSupp;
    private javax.swing.JTable tblUsers;
    private javax.swing.JTable tbldelivery;
    private javax.swing.JTable tblinstocks;
    private javax.swing.JTable tbllowstocks;
    private javax.swing.JTable tblorder;
    private javax.swing.JTable tbloutofstocks;
    private javax.swing.JTable tblrestock;
    // End of variables declaration//GEN-END:variables
}
