package com.classes;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import com.classes.UsersDAO;
import javax.swing.*;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * 
 */
public class Users_Page extends javax.swing.JFrame {
    /**
     * Creates new form Users_Page
     */
    public Users_Page() {
        initComponents();
        
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("UserID");
        model.addColumn("Username");
        model.addColumn("Password");
        model.addColumn("User Type");
        model.addColumn("Location");
        model.addColumn("Phone");
        model.addColumn("Full Name");
        tblUsers.setModel(model);
        loadUsersToTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        lblUsersTitle = new javax.swing.JLabel();
        lblSearchU = new javax.swing.JLabel();
        txtSearchU = new javax.swing.JTextField();
        btnGoU = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUsers = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblFullNameU = new javax.swing.JLabel();
        txtFullNameU = new javax.swing.JTextField();
        lblLocationU = new javax.swing.JLabel();
        txtLocationU = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtContactNumberU = new javax.swing.JTextField();
        lblUsernameU = new javax.swing.JLabel();
        txtUsernameU = new javax.swing.JTextField();
        lblPasswordU = new javax.swing.JLabel();
        txtPasswordU = new javax.swing.JTextField();
        cmbbxUsertype = new javax.swing.JComboBox<>();
        btnAddU = new javax.swing.JButton();
        btnDeleteU = new javax.swing.JButton();
        btnEditU = new javax.swing.JButton();
        btnClearU = new javax.swing.JButton();
        btnCloseU = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));

        jPanel6.setBackground(new java.awt.Color(6, 71, 71));

        lblUsersTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblUsersTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblUsersTitle.setText("Users");

        lblSearchU.setForeground(new java.awt.Color(255, 255, 255));
        lblSearchU.setText("Search:");

        txtSearchU.setBackground(new java.awt.Color(204, 204, 204));

        btnGoU.setBackground(new java.awt.Color(204, 204, 204));
        btnGoU.setText("Go");
        btnGoU.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        btnGoU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoUActionPerformed(evt);
            }
        });

        btnRefresh.setBackground(new java.awt.Color(204, 204, 204));
        btnRefresh.setText("Refresh");
        btnRefresh.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(lblUsersTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblSearchU, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearchU, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGoU, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGoU, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchU))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblUsersTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblUsers.setBackground(new java.awt.Color(204, 204, 204));
        tblUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "User ID", "Username", "Password", "User Type", "Location", "Contact Number", "Full Name"
            }
        ));
        tblUsers.setGridColor(new java.awt.Color(0, 0, 0));
        tblUsers.setRowHeight(23);
        tblUsers.setSelectionBackground(new java.awt.Color(153, 153, 153));
        tblUsers.setShowGrid(false);
        tblUsers.setShowHorizontalLines(true);
        tblUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUsersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblUsers);

        jPanel7.setBackground(new java.awt.Color(6, 71, 71));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Enter User Details");

        lblFullNameU.setForeground(new java.awt.Color(255, 255, 255));
        lblFullNameU.setText("Full Name:");

        txtFullNameU.setBackground(new java.awt.Color(204, 204, 204));

        lblLocationU.setForeground(new java.awt.Color(255, 255, 255));
        lblLocationU.setText("Location:");

        txtLocationU.setBackground(new java.awt.Color(204, 204, 204));
        txtLocationU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLocationUActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Contact Number:");

        txtContactNumberU.setBackground(new java.awt.Color(204, 204, 204));

        lblUsernameU.setForeground(new java.awt.Color(255, 255, 255));
        lblUsernameU.setText("Username:");

        txtUsernameU.setBackground(new java.awt.Color(204, 204, 204));

        lblPasswordU.setForeground(new java.awt.Color(255, 255, 255));
        lblPasswordU.setText("Password:");

        txtPasswordU.setBackground(new java.awt.Color(204, 204, 204));

        cmbbxUsertype.setBackground(new java.awt.Color(204, 204, 204));
        cmbbxUsertype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Administrator", "Employee" }));
        cmbbxUsertype.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));

        btnAddU.setBackground(new java.awt.Color(204, 204, 204));
        btnAddU.setText("Add");
        btnAddU.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        btnAddU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddUActionPerformed(evt);
            }
        });

        btnDeleteU.setBackground(new java.awt.Color(204, 204, 204));
        btnDeleteU.setText("Delete");
        btnDeleteU.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        btnDeleteU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteUActionPerformed(evt);
            }
        });

        btnEditU.setBackground(new java.awt.Color(204, 204, 204));
        btnEditU.setText("Edit");
        btnEditU.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        btnEditU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditUActionPerformed(evt);
            }
        });

        btnClearU.setBackground(new java.awt.Color(204, 204, 204));
        btnClearU.setText("Clear");
        btnClearU.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        btnClearU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearUActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFullNameU, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFullNameU, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLocationU, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUsernameU, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPasswordU, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(btnAddU, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(btnDeleteU, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnEditU, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnClearU, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPasswordU, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUsernameU, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtContactNumberU, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLocationU, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(cmbbxUsertype, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(8, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblFullNameU, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFullNameU, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblLocationU, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtLocationU, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtContactNumberU, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblUsernameU, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUsernameU, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblPasswordU, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPasswordU, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cmbbxUsertype, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddU, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteU, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditU, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClearU, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13))
        );

        btnCloseU.setBackground(new java.awt.Color(102, 102, 102));
        btnCloseU.setForeground(new java.awt.Color(255, 255, 255));
        btnCloseU.setText("Close");
        btnCloseU.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        btnCloseU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseUActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1011, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnCloseU, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCloseU, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    String userType;
    private void btnAddUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddUActionPerformed
        // TODO add your handling code here:
    String username = txtUsernameU.getText();
    String password = txtPasswordU.getText();
    String userType = cmbbxUsertype.getSelectedItem().toString(); 
    String location = txtLocationU.getText();
    String phone = txtContactNumberU.getText();
    String fullname = txtFullNameU.getText();

    // Validate input 
    if (username.isEmpty() || password.isEmpty() || userType.isEmpty() || location.isEmpty() || phone.isEmpty() || fullname.isEmpty()) {
        JOptionPane.showMessageDialog(null, "All fields are required!");
        return; // Exit the method if any field is empty
    }
    
    // Validate phone number (digits only)
    if (!phone.matches("[0-9]+")) {  
        JOptionPane.showMessageDialog(this, "Please enter a valid phone number (only digits allowed).", "Invalid Phone Number", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Check if the username already exists in the database
    String checkQuery = "SELECT COUNT(*) FROM users WHERE username = ?";
    try (Connection conn = new DBConnector().getConnection();
         PreparedStatement checkStmt = conn.prepareStatement(checkQuery)) {
        
        checkStmt.setString(1, username);
        
        try (ResultSet rs = checkStmt.executeQuery()) {
            if (rs.next() && rs.getInt(1) > 0) {
                JOptionPane.showMessageDialog(this, "The username already exists. Please choose a different one.", "Duplicate Username", JOptionPane.ERROR_MESSAGE);
                return; // Exit the method if the username exists
            }
        }
    } catch (SQLException e) {
        System.err.println("Error checking duplicate username: " + e.getMessage());
        JOptionPane.showMessageDialog(null, "Error checking for duplicate username. Please try again.");
        return;
    }

    // Show confirmation dialog with the entered data
    String message = String.format(
        "Please confirm the following details:\n\nUsername: %s\nPassword: %s\nUser Type: %s\nLocation: %s\nPhone: %s\nFull Name: %s", 
        username, password, userType, location, phone, fullname);
    
    int confirmation = JOptionPane.showConfirmDialog(
        null, message, "Confirm User Details", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

    if (confirmation == JOptionPane.NO_OPTION) {
        // User chose "No" to cancel the addition
        JOptionPane.showMessageDialog(null, "User addition cancelled.");
        return; // Exit the method if the user cancels the addition
    }

    // If user confirms, proceed with inserting the data
    String query = "INSERT INTO users (username, password, userType, location, phone, fullname) VALUES (?, ?, ?, ?, ?, ?)";

    // Try with resources (auto-close connections)
    try (Connection conn = new DBConnector().getConnection();
         PreparedStatement pstmt = conn.prepareStatement(query)) {
        
        // Set parameters for the prepared statement
        pstmt.setString(1, username);
        pstmt.setString(2, password);
        pstmt.setString(3, userType);
        pstmt.setString(4, location);
        pstmt.setString(5, phone);
        pstmt.setString(6, fullname);

        // Execute the insert statement
        pstmt.executeUpdate();

        // Show success message
        JOptionPane.showMessageDialog(null, "User added successfully!");
                
        loadUsersToTable();

        // Clear the form after submission 
        txtUsernameU.setText("");
        txtPasswordU.setText("");
        cmbbxUsertype.setSelectedIndex(0); // Reset combo box to default
        txtLocationU.setText("");
        txtContactNumberU.setText("");
        txtFullNameU.setText("");
    } catch (SQLException e) {
        // Handle database errors
        System.err.println("Error inserting user: " + e.getMessage());
        JOptionPane.showMessageDialog(null, "Error adding user. Please try again.");
    }

    }//GEN-LAST:event_btnAddUActionPerformed

    private void btnDeleteUActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
          int selectedRow = tblUsers.getSelectedRow(); 
    
    // If no row is selected, show an error message and exit
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a user to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Fetch the username from the selected row 
    DefaultTableModel model = (DefaultTableModel) tblUsers.getModel();
    String username = model.getValueAt(selectedRow, 1).toString();

    // Show a confirmation dialog
    int confirm = JOptionPane.showConfirmDialog(this, 
        "Are you sure you want to delete the user '" + username + "'?", 
        "Confirm Deletion", 
        JOptionPane.YES_NO_OPTION);
    
    // If "Yes" is selected, proceed with deletion
    if (confirm == JOptionPane.YES_OPTION) {
        // Create a new instance of the DAO to interact with the database
        UsersDAO usersDAO = new UsersDAO();
        
        // Call the delete method and check the result
        boolean isDeleted = usersDAO.deleteUserDAO(username);

        // If deletion is successful, remove the row from the table and show success message
        if (isDeleted) {
            model.removeRow(selectedRow);  // Remove the row from the table
            JOptionPane.showMessageDialog(this, "User '" + username + "' deleted successfully.");
        } else {
            // If deletion fails, show an error message
            JOptionPane.showMessageDialog(this, "Failed to delete user '" + username + "'.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        // If the user cancels, show a cancellation message
        JOptionPane.showMessageDialog(this, "Deletion cancelled.");
    }
}
                     
    private void btnEditUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditUActionPerformed
        // TODO add your handling code here:
            int selectedRow = tblUsers.getSelectedRow();
    
    if (selectedRow != -1) {
        // Get the userID from the selected row 
        int userID = (int) tblUsers.getValueAt(selectedRow, 0);
        
        // Get the original values from the selected row in the table
        String oldUsername = (String) tblUsers.getValueAt(selectedRow, 1); 
        String oldPassword = (String) tblUsers.getValueAt(selectedRow, 2);
        String oldUserType = (String) tblUsers.getValueAt(selectedRow, 3);
        String oldLocation = (String) tblUsers.getValueAt(selectedRow, 4);
        String oldPhone = (String) tblUsers.getValueAt(selectedRow, 5);
        String oldFullname = (String) tblUsers.getValueAt(selectedRow, 6);
        
        // Get the new input values from the form fields
        String username = txtUsernameU.getText();
        String password = txtPasswordU.getText();
        String userType = (String) cmbbxUsertype.getSelectedItem();  
        String location = txtLocationU.getText();
        String phone = txtContactNumberU.getText();
        String fullname = txtFullNameU.getText();

        // Validate phone number (only digits allowed)
        if (!phone.matches("[0-9]+")) {
            JOptionPane.showMessageDialog(this, "Phone number must only contain digits.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;  // Stop further processing if phone is invalid
        }

        // Prepare the differences with arrows to show changes
        StringBuilder confirmationMessage = new StringBuilder("Are you sure you want to update the user details?\n\n");

        // Check each field for changes and add to the confirmation message
        boolean isAnyChange = false;

        if (!username.equals(oldUsername)) {
            confirmationMessage.append("Username: ").append(oldUsername).append(" → ").append(username).append("\n");
            isAnyChange = true;
        }

        if (!password.equals(oldPassword)) {
            confirmationMessage.append("Password: ").append(oldPassword).append(" → ").append(password).append("\n");
            isAnyChange = true;
        }

        if (!userType.equals(oldUserType)) {
            confirmationMessage.append("User Type: ").append(oldUserType).append(" → ").append(userType).append("\n");
            isAnyChange = true;
        }

        if (!location.equals(oldLocation)) {
            confirmationMessage.append("Location: ").append(oldLocation).append(" → ").append(location).append("\n");
            isAnyChange = true;
        }

        if (!phone.equals(oldPhone)) {
            confirmationMessage.append("Phone: ").append(oldPhone).append(" → ").append(phone).append("\n");
            isAnyChange = true;
        }

        if (!fullname.equals(oldFullname)) {
            confirmationMessage.append("Full Name: ").append(oldFullname).append(" → ").append(fullname).append("\n");
            isAnyChange = true;
        }

        if (!isAnyChange) {
            JOptionPane.showMessageDialog(this, "No changes were made.");
            return;  // Exit if no changes are detected
        }

        // Show the confirmation dialog with only the changes
        int confirm = JOptionPane.showConfirmDialog(this, confirmationMessage.toString(), 
                                                   "Confirm Edit", JOptionPane.YES_NO_OPTION);

        // If "Yes" is selected, proceed with the update
        if (confirm == JOptionPane.YES_OPTION) {
            String updateQuery = "UPDATE users SET username = ?, password = ?, userType = ?, location = ?, phone = ?, fullname = ? WHERE userID = ?";

            try (Connection conn = DBConnector.getConnection();
                 PreparedStatement pst = conn.prepareStatement(updateQuery)) {

                pst.setString(1, username);
                pst.setString(2, password);
                pst.setString(3, userType);
                pst.setString(4, location);
                pst.setString(5, phone);
                pst.setString(6, fullname);
                pst.setInt(7, userID);

                int rowsUpdated = pst.executeUpdate();

                if (rowsUpdated > 0) {
                    JOptionPane.showMessageDialog(this, "User updated successfully!");
                    loadUsersToTable(); // Refresh the table after update
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        } else {
            // If "No" is selected, show a cancellation message
            JOptionPane.showMessageDialog(this, "Edit cancelled.");
        }
    } else {
        // If no row is selected, show an error message
        JOptionPane.showMessageDialog(this, "No user selected for editing.");
    }

    }//GEN-LAST:event_btnEditUActionPerformed

    private void btnClearUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearUActionPerformed
        // TODO add your handling code here:
        txtFullNameU.setText("");
        txtLocationU.setText("");
        txtContactNumberU.setText("");
        txtUsernameU.setText("");
        txtPasswordU.setText("");
        txtSearchU.setText("");
    }//GEN-LAST:event_btnClearUActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
         loadUsersToTable(); 
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnGoUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoUActionPerformed
        // TODO add your handling code here:
          String searchQuery = txtSearchU.getText().trim();

    // Check if the search field is empty
    if (!searchQuery.isEmpty()) {
        // Perform search
        searchUsers(searchQuery);
    } else {
        JOptionPane.showMessageDialog(null, "Please enter a search term.");
        }
    }
    private void searchUsers(String searchQuery) {
    DefaultTableModel tableModel = (DefaultTableModel) tblUsers.getModel();
    // Clear the existing data in the table
    tableModel.setRowCount(0);

    
    String searchSQL = "SELECT userID, username, password, userType, location, phone, fullname " +
                       "FROM users " +
                       "WHERE userID LIKE ? OR username LIKE ? OR userType LIKE ? OR location LIKE ? OR phone LIKE ? OR fullname LIKE ? OR password LIKE ?";

    try (Connection conn = DBConnector.getConnection();
         PreparedStatement pst = conn.prepareStatement(searchSQL)) {
        
        String searchPattern = "%" + searchQuery + "%";  // "%" for partial matches

        // Set search parameters
        pst.setString(1, searchPattern);
        pst.setString(2, searchPattern);
        pst.setString(3, searchPattern);
        pst.setString(4, searchPattern);
        pst.setString(5, searchPattern);
        pst.setString(6, searchPattern); 
        pst.setString(7, searchPattern); 

        ResultSet rs = pst.executeQuery();

        while (rs.next()) {
            // Retrieve data from the result set
            int userId = rs.getInt("userID");
            String username = rs.getString("username");
            String password = rs.getString("password"); 
            String usertype = rs.getString("usertype");
            String location = rs.getString("location");
            String phone = rs.getString("phone");
            String fullname = rs.getString("fullname");

            // Add the result to the table in the correct column order
            tableModel.addRow(new Object[]{userId, username, password, usertype, location, phone, fullname});
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error while searching for users: " + e.getMessage());
    }
        
    }//GEN-LAST:event_btnGoUActionPerformed

    private void btnCloseUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseUActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCloseUActionPerformed

    private void txtLocationUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLocationUActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLocationUActionPerformed
    String username;
    private void tblUsersMouseClicked(java.awt.event.MouseEvent evt) {                                      
        // TODO add your handling code here:
          int selectedRow = tblUsers.getSelectedRow();
    
    if (selectedRow != -1) {
        // Get values from the selected row
        int userID = (int) tblUsers.getValueAt(selectedRow, 0);
        String username = (String) tblUsers.getValueAt(selectedRow, 1);
        String password = (String) tblUsers.getValueAt(selectedRow, 2);
        String userType = (String) tblUsers.getValueAt(selectedRow, 3);
        String location = (String) tblUsers.getValueAt(selectedRow, 4);
        String phone = (String) tblUsers.getValueAt(selectedRow, 5);
        String fullname = (String) tblUsers.getValueAt(selectedRow, 6);

        
        txtUsernameU.setText(username);
        txtPasswordU.setText(password);
        txtLocationU.setText(location);
        txtContactNumberU.setText(phone);
        txtFullNameU.setText(fullname);
        
        // Set the selected userType in the ComboBox
        cmbbxUsertype.setSelectedItem(userType);  
    }
}  
     private void loadUsersToTable() {
     DefaultTableModel model = (DefaultTableModel) tblUsers.getModel();
    model.setRowCount(0); // Clear the table
    
    String selectQuery = "SELECT * FROM users";
    try (Connection conn = DBConnector.getConnection();
         PreparedStatement pst = conn.prepareStatement(selectQuery);
         ResultSet rs = pst.executeQuery()) {

        while (rs.next()) {
            Object[] row = new Object[7];
            row[0] = rs.getInt("userID");
            row[1] = rs.getString("username");
            row[2] = rs.getString("password");
            row[3] = rs.getString("userType");
            row[4] = rs.getString("location");
            row[5] = rs.getString("phone");
            row[6] = rs.getString("fullname");

            model.addRow(row);
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
}
    /**
     * @param args the command line arguments
     */
   
        public static void main(String[] args) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Users_Page().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddU;
    private javax.swing.JButton btnClearU;
    private javax.swing.JButton btnCloseU;
    private javax.swing.JButton btnDeleteU;
    private javax.swing.JButton btnEditU;
    private javax.swing.JButton btnGoU;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JComboBox<String> cmbbxUsertype;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFullNameU;
    private javax.swing.JLabel lblLocationU;
    private javax.swing.JLabel lblPasswordU;
    private javax.swing.JLabel lblSearchU;
    private javax.swing.JLabel lblUsernameU;
    private javax.swing.JLabel lblUsersTitle;
    private javax.swing.JTable tblUsers;
    private javax.swing.JTextField txtContactNumberU;
    private javax.swing.JTextField txtFullNameU;
    private javax.swing.JTextField txtLocationU;
    private javax.swing.JTextField txtPasswordU;
    private javax.swing.JTextField txtSearchU;
    private javax.swing.JTextField txtUsernameU;
    // End of variables declaration//GEN-END:variables

}