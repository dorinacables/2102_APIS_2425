/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.classes;

import java.sql.PreparedStatement;
import java.sql.SQLException; 
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import java.awt.event.*;
import java.sql.*;
/**
 *
 * 
 */
public class Delivery_Page extends javax.swing.JFrame {     
    
public Delivery_Page(Connection connection) {
        // Pass database connection    
}
    /**
     * Creates new form Delivery_Page
     */
    public Delivery_Page() {
        initComponents();
        populateProductCodes();
        loadDeliveriesTable() ;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        lblprodcode = new javax.swing.JLabel();
        cmbbxprodcode = new javax.swing.JComboBox<>();
        lblprodname = new javax.swing.JLabel();
        lblquandev = new javax.swing.JLabel();
        txtquandel = new javax.swing.JTextField();
        txtprodname = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbldelivery = new javax.swing.JTable();
        btnadd = new javax.swing.JButton();
        btnclose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter Details"));

        lblTitle.setText("Delivery Log");

        lblprodcode.setText("Product Code:");

        cmbbxprodcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbbxprodcodeActionPerformed(evt);
            }
        });

        lblprodname.setText("Product Name:");

        lblquandev.setText("Quantity Delivered:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(lblTitle))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(lblprodcode))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblquandev, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbbxprodcode, 0, 179, Short.MAX_VALUE)
                            .addComponent(lblprodname, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtquandel, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtprodname))))
                .addContainerGap(85, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(lblTitle)
                .addGap(39, 39, 39)
                .addComponent(lblprodcode)
                .addGap(18, 18, 18)
                .addComponent(cmbbxprodcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(lblprodname)
                .addGap(17, 17, 17)
                .addComponent(txtprodname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblquandev)
                .addGap(18, 18, 18)
                .addComponent(txtquandel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(130, Short.MAX_VALUE))
        );

        tbldelivery.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Delivery ID", "Product Code", "Product Name", "Quantity Delivered", "Date"
            }
        ));
        jScrollPane1.setViewportView(tbldelivery);

        btnadd.setText("Proceed");
        btnadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaddActionPerformed(evt);
            }
        });

        btnclose.setText("Close");
        btnclose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 916, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(339, 339, 339)
                        .addComponent(btnadd)
                        .addGap(18, 18, 18)
                        .addComponent(btnclose)))
                .addGap(342, 342, 342))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnadd)
                    .addComponent(btnclose))
                .addGap(44, 44, 44))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbbxprodcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbbxprodcodeActionPerformed
        // TODO add your handling code here:
         fetchProductDetails(cmbbxprodcode.getSelectedItem().toString());
         populateProductCodes();
          
    }//GEN-LAST:event_cmbbxprodcodeActionPerformed

    private void btnaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaddActionPerformed
        // TODO add your handling code here:
           submitDelivery();
    }//GEN-LAST:event_btnaddActionPerformed

    private void btncloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncloseActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btncloseActionPerformed
    
      private void populateProductCodes() {  
    // Fetch product codes directly from the database and populate the ComboBox
    String query = "SELECT product_code FROM products";
    try (Connection conn = DBConnector.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(query);
         ResultSet rs = pstmt.executeQuery()) {

        // Loop through each product code and add it to the ComboBox
        while (rs.next()) {
            String prodCode = rs.getString("product_code");
            
            // Check if the product code already exists in the ComboBox
            boolean exists = false;
            for (int i = 0; i < cmbbxprodcode.getItemCount(); i++) {
                if (cmbbxprodcode.getItemAt(i).equals(prodCode)) {
                    exists = true;
                    break; // If found, no need to add it again
                }
            }

            // Add product code if not already in the ComboBox
            if (!exists) {
                cmbbxprodcode.addItem(prodCode);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

    // Method to fetch product details based on the selected product code
    private void fetchProductDetails(String productCode) {
        try (Connection conn = DBConnector.getConnection()) {
            String query = "SELECT product_name FROM products WHERE product_code = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, productCode);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                txtprodname.setText(rs.getString("product_name"));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    // Method to handle form submission
 private void submitDelivery() {
   String productCode = (String) cmbbxprodcode.getSelectedItem();
    String productName = txtprodname.getText();
    String quantityDeliveredText = txtquandel.getText();

    // Check if the quantity delivered is a valid number
    if (quantityDeliveredText.isEmpty() || !isNumeric(quantityDeliveredText)) {
        JOptionPane.showMessageDialog(this, "Please enter a valid quantity.");
        return;
    }

    int quantityDelivered = Integer.parseInt(quantityDeliveredText);

    // Query to get the current quantity of the product
    String currentQuantityQuery = "SELECT quantity FROM products WHERE product_code = ?";
    int currentQuantity = 0;

    try (Connection conn = DBConnector.getConnection();
         PreparedStatement pst = conn.prepareStatement(currentQuantityQuery)) {

        pst.setString(1, productCode);
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            currentQuantity = rs.getInt("quantity");
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }

    // Show a confirmation dialog with the change in quantity
    int newQuantity = currentQuantity + quantityDelivered;
    String message = String.format("You are about to update the quantity of %s (Product Code: %s) from %d to %d. Do you want to proceed?", 
                                  productName, productCode, currentQuantity, newQuantity);
    
    int confirm = JOptionPane.showConfirmDialog(this, message, "Confirm Delivery", JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        // Insert the delivery record into the deliveries table
        String insertDeliveryQuery = "INSERT INTO deliveries (product_code, product_name, quantity_delivered) VALUES (?, ?, ?)";
        try (Connection conn = DBConnector.getConnection();
             PreparedStatement stmt = conn.prepareStatement(insertDeliveryQuery)) {

            stmt.setString(1, productCode);
            stmt.setString(2, productName);
            stmt.setInt(3, quantityDelivered);  // Use the parsed integer for quantity delivered
            stmt.executeUpdate();

            // Update the product quantity in the products table by adding the delivered quantity
            String updateProductQuery = "UPDATE products SET quantity = ? WHERE product_code = ?";
            try (PreparedStatement updateStmt = conn.prepareStatement(updateProductQuery)) {
                updateStmt.setInt(1, newQuantity); // Update the quantity with the new total
                updateStmt.setString(2, productCode);
                updateStmt.executeUpdate();
            }

            // Show success message
            JOptionPane.showMessageDialog(this, "Delivery submitted successfully!");

            // Refresh the deliveries table to reflect updated data
            loadDeliveriesTable();  
      
            
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error submitting delivery.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Delivery process canceled.");
    }
}

       private boolean isNumeric(String str) {
    try {
        Integer.parseInt(str); // Try to parse the string as an integer
        return true;
    } catch (NumberFormatException e) {
        return false; // If it fails to parse, it's not numeric
    }
}
    private void loadDeliveriesTable() {
     try (Connection conn = DBConnector.getConnection()) {
        String query = "SELECT * FROM deliveries";
        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();
        
        // Clear existing table data before populating with new data
        DefaultTableModel model = (DefaultTableModel) tbldelivery.getModel();
        model.setRowCount(0); // Clears the table

        // Populate the table with updated delivery data
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("delivery_id"),  
                rs.getString("product_code"),
                rs.getString("product_name"),
                rs.getInt("quantity_delivered"),
                rs.getTimestamp("delivery_date") 
            });
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading delivery data.");
    }
}
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Delivery_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Delivery_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Delivery_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Delivery_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Delivery_Page().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnadd;
    private javax.swing.JButton btnclose;
    private javax.swing.JComboBox<String> cmbbxprodcode;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblprodcode;
    private javax.swing.JLabel lblprodname;
    private javax.swing.JLabel lblquandev;
    private javax.swing.JTable tbldelivery;
    private javax.swing.JTextField txtprodname;
    private javax.swing.JTextField txtquandel;
    // End of variables declaration//GEN-END:variables
}
