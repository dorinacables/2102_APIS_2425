package com.classes;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.sql.SQLException;  

/**
 *
 *
 */
public class Products_Page extends javax.swing.JFrame {
    Products products;
    String username = null;
    String suppliercode = null;
    int userID;
    
    
    
    private DefaultTableModel tableModel;
    
    private ProductsDAO productsDAO;
    
    public Products_Page(){}

    /**
     * Creates new form Products_Page
     */
    public Products_Page(String username) {
        initComponents();
        this.username = username;
        
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Product ID");
        model.addColumn("Product Code");
        model.addColumn("Product Name");
        model.addColumn("Quantity");
        model.addColumn("Price");
        model.addColumn("Brand");
        model.addColumn("Supplier Name");
        tblProducts.setModel(model);
        loadProductsToTable();
        
         refreshTable();   
         refreshSupplierComboBox();  
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlProductsBG = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProducts = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        lblProductCode = new javax.swing.JLabel();
        txtProductCode = new javax.swing.JTextField();
        lblProductName = new javax.swing.JLabel();
        txtProductName = new javax.swing.JTextField();
        lblQuantity = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        lblPrice = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        lblBrand = new javax.swing.JLabel();
        txtBrand = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        lblSupplierName = new javax.swing.JLabel();
        btnIncrease = new javax.swing.JButton();
        btnDecrease = new javax.swing.JButton();
        cmbbxSuppliers = new javax.swing.JComboBox<>();
        btnAddSupplier = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        pnlProductsHeader = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnGo = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1280, 720));

        pnlProductsBG.setBackground(new java.awt.Color(196, 197, 197));

        tblProducts.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        tblProducts.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        tblProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Product ID", "Product Code", "Product Name", "Quantity", "Price", "Brand", "Supplier Name"
            }
        ));
        tblProducts.setRowHeight(23);
        tblProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProducts);

        jPanel1.setBackground(new java.awt.Color(42, 58, 63));
        jPanel1.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));

        lblProductCode.setForeground(new java.awt.Color(255, 255, 255));
        lblProductCode.setText("Product Code: ");

        txtProductCode.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));

        lblProductName.setForeground(new java.awt.Color(255, 255, 255));
        lblProductName.setText("Product Name: ");

        txtProductName.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        txtProductName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProductNameActionPerformed(evt);
            }
        });

        lblQuantity.setForeground(new java.awt.Color(255, 255, 255));
        lblQuantity.setText("Quantity:");

        lblPrice.setForeground(new java.awt.Color(255, 255, 255));
        lblPrice.setText("Price:");

        txtPrice.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));

        lblBrand.setForeground(new java.awt.Color(255, 255, 255));
        lblBrand.setText("Brand:");

        txtBrand.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        txtBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBrandActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        btnAdd.setPreferredSize(new java.awt.Dimension(70, 30));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        btnEdit.setPreferredSize(new java.awt.Dimension(70, 30));
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        btnDelete.setPreferredSize(new java.awt.Dimension(70, 30));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        btnClear.setPreferredSize(new java.awt.Dimension(70, 30));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        lblSupplierName.setForeground(new java.awt.Color(255, 255, 255));
        lblSupplierName.setText("Supplier:");

        btnIncrease.setText("Increase");
        btnIncrease.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        btnIncrease.setPreferredSize(new java.awt.Dimension(70, 30));
        btnIncrease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIncreaseActionPerformed(evt);
            }
        });

        btnDecrease.setText("Decrease");
        btnDecrease.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        btnDecrease.setPreferredSize(new java.awt.Dimension(70, 30));
        btnDecrease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecreaseActionPerformed(evt);
            }
        });

        cmbbxSuppliers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Denso Brand", "ABC Company", "Toyota Supply", "Honda Comp", "Bosch Company", "Company X", "Company B", "Company D", "Company V" }));

        btnAddSupplier.setText("Add New Supplier");
        btnAddSupplier.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        btnAddSupplier.setPreferredSize(new java.awt.Dimension(105, 30));
        btnAddSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSupplierActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Enter Product Details");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProductCode)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtProductCode)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblProductName)
                            .addComponent(lblBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProductName, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                            .addComponent(txtBrand)))
                    .addComponent(lblQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(btnIncrease, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDecrease, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblSupplierName)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cmbbxSuppliers, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(btnAddSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel2)
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProductCode)
                    .addComponent(lblProductName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProductCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(txtBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPrice)
                            .addComponent(lblBrand))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblQuantity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnIncrease, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDecrease, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSupplierName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbbxSuppliers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(87, Short.MAX_VALUE))
        );

        pnlProductsHeader.setBackground(new java.awt.Color(42, 58, 63));
        pnlProductsHeader.setPreferredSize(new java.awt.Dimension(123, 72));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("PRODUCTS");

        lblSearch.setForeground(new java.awt.Color(255, 255, 255));
        lblSearch.setText("Search: ");

        txtSearch.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));

        btnGo.setText("Go");
        btnGo.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        btnGo.setPreferredSize(new java.awt.Dimension(70, 30));
        btnGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        btnRefresh.setPreferredSize(new java.awt.Dimension(70, 30));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlProductsHeaderLayout = new javax.swing.GroupLayout(pnlProductsHeader);
        pnlProductsHeader.setLayout(pnlProductsHeaderLayout);
        pnlProductsHeaderLayout.setHorizontalGroup(
            pnlProductsHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProductsHeaderLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 735, Short.MAX_VALUE)
                .addComponent(lblSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGo, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        pnlProductsHeaderLayout.setVerticalGroup(
            pnlProductsHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProductsHeaderLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(pnlProductsHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addGroup(pnlProductsHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblSearch)
                        .addComponent(btnGo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        btnClose.setBackground(new java.awt.Color(42, 58, 63));
        btnClose.setForeground(new java.awt.Color(255, 255, 255));
        btnClose.setText("Close");
        btnClose.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        btnClose.setPreferredSize(new java.awt.Dimension(70, 30));
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlProductsBGLayout = new javax.swing.GroupLayout(pnlProductsBG);
        pnlProductsBG.setLayout(pnlProductsBGLayout);
        pnlProductsBGLayout.setHorizontalGroup(
            pnlProductsBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProductsBGLayout.createSequentialGroup()
                .addGroup(pnlProductsBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlProductsBGLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 902, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(pnlProductsBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlProductsBGLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(pnlProductsHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 1280, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 131, Short.MAX_VALUE))
        );
        pnlProductsBGLayout.setVerticalGroup(
            pnlProductsBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProductsBGLayout.createSequentialGroup()
                .addComponent(pnlProductsHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlProductsBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlProductsBG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlProductsBG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
String productName = txtProductName.getText();
String productCode = txtProductCode.getText();
String priceStr = txtPrice.getText();
String quantityStr = txtQuantity.getText();
String brand = txtBrand.getText();
String supplier = cmbbxSuppliers.getSelectedItem().toString();

// Validate that all fields are filled out and that price and quantity are valid
if (productName.isEmpty() || productCode.isEmpty() || priceStr.isEmpty() || quantityStr.isEmpty() || brand.isEmpty() || supplier.isEmpty()) {
    JOptionPane.showMessageDialog(this, "Please fill out all fields.");
    return;  // Exit if any field is empty
}

// Parsing price and quantity
double price = 0;
int quantity = 0;
try {
    price = Double.parseDouble(priceStr);
    quantity = Integer.parseInt(quantityStr);
} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Please enter valid numbers for price and quantity.");
    return;  // Exit if price or quantity is invalid
}

// Display confirmation dialog with entered product details
String message = "Please confirm the product details:\n\n" +
                 "Product Name: " + productName + "\n" +
                 "Product Code: " + productCode + "\n" +
                 "Price: " + price + "\n" +
                 "Quantity: " + quantity + "\n" +
                 "Brand: " + brand + "\n" +
                 "Supplier: " + supplier;

int option = JOptionPane.showConfirmDialog(this, message, "Confirm Product Addition", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

if (option == JOptionPane.YES_OPTION) {
    // Check if the supplier exists in the suppliers table and get the supplier_id
    int supplierId = 0;
    String selectSupplierQuery = "SELECT supplier_id FROM suppliers WHERE suppliername = ?";
    try (Connection conn = DBConnector.getConnection();
         PreparedStatement pst = conn.prepareStatement(selectSupplierQuery)) {

        pst.setString(1, supplier);
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            supplierId = rs.getInt("supplier_id");  // Supplier exists, get supplier_id
        } else {
            // Supplier does not exist, insert it into the suppliers table
            String insertSupplierQuery = "INSERT INTO suppliers (suppliername) VALUES (?)";
            try (PreparedStatement insertPst = conn.prepareStatement(insertSupplierQuery, Statement.RETURN_GENERATED_KEYS)) {
                insertPst.setString(1, supplier);
                insertPst.executeUpdate();
                
                // Get the generated supplier_id
                ResultSet generatedKeys = insertPst.getGeneratedKeys();
                if (generatedKeys.next()) {
                    supplierId = generatedKeys.getInt(1);  // Get generated supplier_id
                }
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error checking or adding supplier: " + ex.getMessage());
        return;  // Exit if an error occurs
    }

    // SQL query to add a new product
    String insertProductQuery = "INSERT INTO products (product_code, product_name, price, brand, supplier_id, quantity) VALUES (?, ?, ?, ?, ?, ?)";
    try (Connection conn = DBConnector.getConnection();
         PreparedStatement pst = conn.prepareStatement(insertProductQuery)) {

        // Set the values for the prepared statement
        pst.setString(1, productCode);
        pst.setString(2, productName);
        pst.setDouble(3, price);
        pst.setString(4, brand);
        pst.setInt(5, supplierId); 
        pst.setInt(6, quantity);

        // Execute the insert query
        int rowsInserted = pst.executeUpdate();

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Product added successfully!");
            refreshTable();  // Refresh the table after adding the product
        } else {
            JOptionPane.showMessageDialog(this, "Error: Product addition failed.");
        }

    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage());
    }
} else {
    // If the user cancels, show a message
    JOptionPane.showMessageDialog(this, "Product addition canceled.");
}
     
    }//GEN-LAST:event_btnAddActionPerformed

    private void tblProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductsMouseClicked
        // TODO add your handling code here:
        int selectedRow = tblProducts.getSelectedRow(); // Get selected row index
    if (selectedRow != -1) {
        // Get the product details from the selected row and set them in the respective text fields
        txtProductCode.setText(tblProducts.getValueAt(selectedRow, 1).toString());
        txtProductName.setText(tblProducts.getValueAt(selectedRow, 2).toString());
        txtQuantity.setText(tblProducts.getValueAt(selectedRow, 3).toString());
        txtPrice.setText(tblProducts.getValueAt(selectedRow, 4).toString());
        txtBrand.setText(tblProducts.getValueAt(selectedRow, 5).toString());

        // Get the supplier name from the selected row
        String supplierName = tblProducts.getValueAt(selectedRow, 6).toString();

        // Set the supplier name in the combo box
        cmbbxSuppliers.setSelectedItem(supplierName); 
    }    
    }//GEN-LAST:event_tblProductsMouseClicked

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
    int selectedRow = tblProducts.getSelectedRow();
    
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a product to edit.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Get the original (old) product details from the table
    int productId = Integer.parseInt(tblProducts.getValueAt(selectedRow, 0).toString());
    String oldProductCode = tblProducts.getValueAt(selectedRow, 1).toString();
    String oldProductName = tblProducts.getValueAt(selectedRow, 2).toString();
    String oldQuantity = tblProducts.getValueAt(selectedRow, 3).toString();
    String oldPrice = tblProducts.getValueAt(selectedRow, 4).toString();
    String oldBrand = tblProducts.getValueAt(selectedRow, 5).toString();
    String oldSupplier = tblProducts.getValueAt(selectedRow, 6).toString();
    
    // Get product details from the input fields
    String productCode = txtProductCode.getText().trim();
    String productName = txtProductName.getText().trim();
    String price = txtPrice.getText().trim();
    String brand = txtBrand.getText().trim();
    String supplier = cmbbxSuppliers.getSelectedItem().toString().trim(); 
    String quantity = txtQuantity.getText().trim();

    // Validate input fields 
    if (productCode.isEmpty() || productName.isEmpty() || price.isEmpty() || quantity.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill out all required fields.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Check if the quantity was changed
    if (!quantity.equals(oldQuantity)) {
        JOptionPane.showMessageDialog(this, "You cannot edit the quantity. You can only increase or decrease it through delivery or order processing.", "Invalid Edit", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Check if any other details have changed and prepare the changes message
    boolean hasChanges = false;
    StringBuilder changesMessage = new StringBuilder("Please confirm the updated product details:\n\n");

    if (!productCode.equals(oldProductCode)) {
        hasChanges = true;
        changesMessage.append("Product Code: " + oldProductCode + " → " + productCode + "\n");
    }
    if (!productName.equals(oldProductName)) {
        hasChanges = true;
        changesMessage.append("Product Name: " + oldProductName + " → " + productName + "\n");
    }
    if (!price.equals(oldPrice)) {
        hasChanges = true;
        changesMessage.append("Price: " + oldPrice + " → " + price + "\n");
    }
    if (!brand.equals(oldBrand)) {
        hasChanges = true;
        changesMessage.append("Brand: " + oldBrand + " → " + brand + "\n");
    }
    if (!supplier.equals(oldSupplier)) {
        hasChanges = true;
        changesMessage.append("Supplier: " + oldSupplier + " → " + supplier + "\n");
    }

    // If no changes, display a message and return
    if (!hasChanges) {
        JOptionPane.showMessageDialog(this, "No changes made to the product details.", "No Changes", JOptionPane.INFORMATION_MESSAGE);
        return;
    }

    // Display confirmation dialog with the highlighted changes
    int option = JOptionPane.showConfirmDialog(this, changesMessage.toString(), "Confirm Product Update", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

    if (option == JOptionPane.YES_OPTION) {
        // Get the supplier_id from the selected supplier name
        int supplierId = getSupplierId(supplier);

        // Update query
        String updateQuery = "UPDATE products SET product_code = ?, product_name = ?, quantity = ?, price = ?, brand = ?, supplier_id = ? WHERE product_id = ?";

        try (Connection conn = DBConnector.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(updateQuery)) {

            // Set parameters for the query
            pstmt.setString(1, productCode);
            pstmt.setString(2, productName);
            pstmt.setString(3, quantity);  // This will not be updated since the user cannot edit it
            pstmt.setString(4, price);
            pstmt.setString(5, brand);
            pstmt.setInt(6, supplierId); 
            pstmt.setInt(7, productId);

            // Execute the update
            int rowsAffected = pstmt.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Product updated successfully!");

                // Update JTable directly with new values
                tblProducts.setValueAt(productCode, selectedRow, 1);
                tblProducts.setValueAt(productName, selectedRow, 2);
                tblProducts.setValueAt(price, selectedRow, 4);
                tblProducts.setValueAt(brand, selectedRow, 5);
                tblProducts.setValueAt(supplier, selectedRow, 6);
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update product.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }

    } else {
        // If the user cancels, show a message
        JOptionPane.showMessageDialog(this, "Product update cancelled.");
    }
}
    
// Function to get supplier_id based on supplier name
private int getSupplierId(String supplierName) {
    int supplierId = -1;
    String query = "SELECT supplier_id FROM suppliers WHERE suppliername = ?";
    
    try (Connection conn = DBConnector.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(query)) {

        pstmt.setString(1, supplierName);
        ResultSet rs = pstmt.executeQuery();

        if (rs.next()) {
            supplierId = rs.getInt("supplier_id");
        }

    } catch (SQLException ex) {
        ex.printStackTrace();
    }

    return supplierId;

    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
         if (tblProducts.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this, "No products available to delete.", "Information", JOptionPane.INFORMATION_MESSAGE);
        return;
    }

    // Check if a row is selected
    int selectedRow = tblProducts.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a product to delete.", "Validation Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Retrieve product details for confirmation
    String productCode = tblProducts.getValueAt(selectedRow, 1).toString(); 
    String productName = tblProducts.getValueAt(selectedRow, 2).toString(); 

    // Display a confirmation dialog
    String confirmationMessage = "Are you sure you want to delete the product?\n\n"
                                + "Product Code: " + productCode + "\n"
                                + "Product Name: " + productName;

    int confirm = JOptionPane.showConfirmDialog(
            this, 
            confirmationMessage, 
            "Confirm Deletion", 
            JOptionPane.YES_NO_OPTION, 
            JOptionPane.WARNING_MESSAGE
    );

    if (confirm == JOptionPane.YES_OPTION) {
        try (Connection conn = DBConnector.getConnection()) {
            // Delete query
            String query = "DELETE FROM products WHERE product_code = ?";
            try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                pstmt.setString(1, productCode);

                // Execute the deletion
                int rowsAffected = pstmt.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Product '" + productName + "' deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                    refreshTable();  // Call a method to refresh the JTable after deletion
                } else {
                    JOptionPane.showMessageDialog(this, "Error: Product not found in the database.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "An error occurred while deleting the product. Please try again later.", "Database Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace(); // Log the error for debugging
        }
    } else {
        // If the user cancels, show an informational message
        JOptionPane.showMessageDialog(this, "Product deletion canceled.", "Cancellation", JOptionPane.INFORMATION_MESSAGE);
    }


    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
         clearFields();
    }
    private void clearFields() {
        txtProductCode.setText("");
        txtProductName.setText("");
        txtQuantity.setText("");
        txtPrice.setText("");
        txtBrand.setText("");    
        txtSearch.setText("");  
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
         refreshTable();   
         refreshSupplierComboBox();  
}

// Method to refresh the product table with supplier names
    private void refreshSupplierComboBox() {
    // Connect to the database
    try (Connection conn = DBConnector.getConnection()) {
        // Query to fetch supplier names from the suppliers table
        String query = "SELECT suppliername FROM suppliers";
        try (PreparedStatement prepStatement = conn.prepareStatement(query);
             ResultSet resultSet = prepStatement.executeQuery()) {

            // Loop through the result set and add supplier names to the ComboBox
            while (resultSet.next()) {
                String supplierName = resultSet.getString("suppliername");

                // Add the supplier name to the ComboBox only if it's not already there
                if (!isItemInComboBox(supplierName)) {
                    cmbbxSuppliers.addItem(supplierName);  // Add the new supplier
                }
            }

        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error refreshing supplier ComboBox: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

// Helper method to check if an item already exists in the ComboBox
private boolean isItemInComboBox(String item) {
    // Check if the item already exists in the ComboBox
    for (int i = 0; i < cmbbxSuppliers.getItemCount(); i++) {
        if (cmbbxSuppliers.getItemAt(i).equals(item)) {
            return true; // Item already exists
        }
    }
    return false; // Item doesn't exist
}

// Method to refresh the product table (this method gets data from the database)
private void refreshTable() {
    try (Connection conn = DBConnector.getConnection()) {
        // Query to join products and suppliers to get the supplier's name
        String query = "SELECT p.product_id, p.product_code, p.product_name, p.quantity, p.price, p.brand, s.suppliername "
                       + "FROM products p "
                       + "JOIN suppliers s ON p.supplier_id = s.supplier_id";

        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
            DefaultTableModel model = (DefaultTableModel) tblProducts.getModel();
            model.setRowCount(0); // Clear existing rows before adding updated data

            while (rs.next()) {
                model.addRow(new Object[] {
                    rs.getInt("product_id"),
                    rs.getString("product_code"),
                    rs.getString("product_name"),
                    rs.getInt("quantity"),
                    rs.getDouble("price"),
                    rs.getString("brand"),
                    rs.getString("suppliername")  // Getting the supplier name from the suppliers table
                });
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error refreshing the table: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnIncreaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIncreaseActionPerformed
        // TODO add your handling code here:
          int selectedRow = tblProducts.getSelectedRow();

    if (selectedRow != -1) {
        // Retrieve the product_code from the selected row 
        String productCode = (String) tblProducts.getValueAt(selectedRow, 1);  

        // Get the current quantity from the input field
        int increaseAmount = Integer.parseInt(txtQuantity.getText());

        // Query to get the current quantity of the product
        String query = "SELECT quantity FROM products WHERE product_code = ?";
        
        try (Connection conn = DBConnector.getConnection();
             PreparedStatement pst = conn.prepareStatement(query)) {

            // Set the product_code to retrieve the current quantity
            pst.setString(1, productCode);
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                int currentQuantity = rs.getInt("quantity");

                // Calculate the new quantity after increase
                int newQuantity = currentQuantity + increaseAmount;

                // Update the quantity in the database
                String updateQuery = "UPDATE products SET quantity = ? WHERE product_code = ?";
                try (PreparedStatement updatePst = conn.prepareStatement(updateQuery)) {
                    updatePst.setInt(1, newQuantity);
                    updatePst.setString(2, productCode);
                    int rowsUpdated = updatePst.executeUpdate();

                    if (rowsUpdated > 0) {
                        JOptionPane.showMessageDialog(this, "Quantity increased successfully!");
                        refreshTable();  
                    }
                }
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "No product selected for increasing quantity.");
    }
    }//GEN-LAST:event_btnIncreaseActionPerformed

    private void btnDecreaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecreaseActionPerformed
        // TODO add your handling code here:
          int selectedRow = tblProducts.getSelectedRow();

    if (selectedRow != -1) {
        // Retrieve the product_code from the selected row 
        String productCode = (String) tblProducts.getValueAt(selectedRow, 1);  

        // Get the current quantity from the input field
        int decreaseAmount = Integer.parseInt(txtQuantity.getText());

        // Query to get the current quantity of the product
        String query = "SELECT quantity FROM products WHERE product_code = ?";

        try (Connection conn = DBConnector.getConnection();
             PreparedStatement pst = conn.prepareStatement(query)) {

            // Set the product_code to retrieve the current quantity
            pst.setString(1, productCode);
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                int currentQuantity = rs.getInt("quantity");

                // Check if the quantity to decrease is valid
                if (decreaseAmount > currentQuantity) {
                    JOptionPane.showMessageDialog(this, "Error: Cannot decrease quantity below 0.");
                } else {
                    // Calculate the new quantity after decrease
                    int newQuantity = currentQuantity - decreaseAmount;

                    // Update the quantity in the database
                    String updateQuery = "UPDATE products SET quantity = ? WHERE product_code = ?";
                    try (PreparedStatement updatePst = conn.prepareStatement(updateQuery)) {
                        updatePst.setInt(1, newQuantity);
                        updatePst.setString(2, productCode);
                        int rowsUpdated = updatePst.executeUpdate();

                        if (rowsUpdated > 0) {
                            JOptionPane.showMessageDialog(this, "Quantity decreased successfully!");
                            refreshTable(); 
                        }
                    }
                }
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "No product selected for decreasing quantity.");
    }
    }//GEN-LAST:event_btnDecreaseActionPerformed

    private void btnGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoActionPerformed
        // TODO add your handling code here:
          String searchQuery = txtSearch.getText().trim();  // Get search input from the text field
        if (!searchQuery.isEmpty()) {
            searchProducts(searchQuery);
        } else {
            JOptionPane.showMessageDialog(null, "Please enter a search term.");
        }   
    }//GEN-LAST:event_btnGoActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:     
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnAddSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSupplierActionPerformed
        // TODO add your handling code here:
    Suppliers_Page suppliersPage = new Suppliers_Page(); 
    suppliersPage.setVisible(true);
    this.dispose(); 
    }//GEN-LAST:event_btnAddSupplierActionPerformed

    private void txtProductNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProductNameActionPerformed

    private void txtBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBrandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBrandActionPerformed
    
    private void searchProducts(String searchQuery) {
          DefaultTableModel tableModel = (DefaultTableModel) tblProducts.getModel();
    // Clear the existing data in the table
    tableModel.setRowCount(0);

    String searchSQL = "SELECT p.product_id, p.product_code, p.product_name, p.quantity, p.price, p.brand, s.suppliername " +
                       "FROM products p " +
                       "JOIN suppliers s ON p.supplier_id = s.supplier_id " +  // Join with suppliers table
                       "WHERE (p.product_name LIKE ? OR p.product_code LIKE ? OR p.brand LIKE ? OR s.suppliername LIKE ? " +
                       "OR CAST(p.quantity AS CHAR) LIKE ? OR CAST(p.price AS CHAR) LIKE ?)";

    try (Connection conn = DBConnector.getConnection();
         PreparedStatement pst = conn.prepareStatement(searchSQL)) {
        
        String searchPattern = "%" + searchQuery + "%";  // % for partial matches
        
        // Set the search query parameters for all columns: product_name, product_code, brand, supplier, quantity, price
        pst.setString(1, searchPattern);
        pst.setString(2, searchPattern);
        pst.setString(3, searchPattern);
        pst.setString(4, searchPattern);
        pst.setString(5, searchPattern);  
        pst.setString(6, searchPattern);  
        
        ResultSet rs = pst.executeQuery();
        
        while (rs.next()) {
            // Retrieve data from the result set
            int productId = rs.getInt("product_id");
            String productCode = rs.getString("product_code");
            String productName = rs.getString("product_name");
            double price = rs.getDouble("price");
            String brand = rs.getString("brand");
            String supplierName = rs.getString("suppliername");
            int quantity = rs.getInt("quantity");

            // Add the result to the table model
            tableModel.addRow(new Object[]{productId, productCode, productName, quantity, price, brand, supplierName});
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error while searching for products: " + e.getMessage());
    }
}
    public JComboBox<String> getSupplierComboBox() {
        return cmbbxSuppliers;
    }
    
      private void loadProductsToTable() {
        DefaultTableModel model = (DefaultTableModel) tblProducts.getModel();
        model.setRowCount(0);  // Clear existing data in the table
        
        String selectQuery = "SELECT p.product_id, p.product_code, p.product_name, p.quantity, p.price, p.brand, s.suppliername " +
                             "FROM products p " +
                             "JOIN suppliers s ON p.supplier_id = s.supplier_id"; // Query to fetch product details
        
        try (Connection conn = DBConnector.getConnection();
             PreparedStatement pst = conn.prepareStatement(selectQuery);
             ResultSet rs = pst.executeQuery()) {

            while (rs.next()) {
                Object[] row = new Object[7];
                row[0] = rs.getInt("product_id");    
                row[1] = rs.getString("product_code");  
                row[2] = rs.getString("product_name");  
                row[3] = rs.getInt("quantity");        
                row[4] = rs.getDouble("price");        
                row[5] = rs.getString("brand");        
                row[6] = rs.getString("suppliername"); 
                
                model.addRow(row);  // Add row to the table model
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading products: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Products_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Products_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Products_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Products_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Products_Page().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddSupplier;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDecrease;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnGo;
    private javax.swing.JButton btnIncrease;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JComboBox<String> cmbbxSuppliers;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBrand;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblProductCode;
    private javax.swing.JLabel lblProductName;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblSupplierName;
    private javax.swing.JPanel pnlProductsBG;
    private javax.swing.JPanel pnlProductsHeader;
    private javax.swing.JTable tblProducts;
    private javax.swing.JTextField txtBrand;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtProductCode;
    private javax.swing.JTextField txtProductName;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

}